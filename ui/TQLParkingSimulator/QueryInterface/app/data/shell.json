{
			"help" : "Basic elements of a TQL Query \n\n\t<Using/> - when used as a structure, this section defines extra models, entity facets \n\n\t(i.e. constrained models), constants and literals which can be used in the query. \n\n\t When used as a string attribute, it can point to default namespaces which compiler \n\n\tshould use in type resolution. \n\n\t<Find/> (synonyms: <From/>) - this section defines search pattern. Entity type can be \n\n\tgiven by tag or by type attribute or composed by the compiler from tag/type and \"using\" attribute. \n\n\tMultiple <Find/> sections can be given aliased by \"as\" attribute if necessary. \n\n\t<Where/> (synonyms: Constraint, eq, ne, le, ge etc.) - this section contains stand-alone constraints if any \n\n\t<Select/> - this [optional] section defines selection structure. If not given then \n\n\t<Select>Find.*</Select> is assumed (i.e. search pattern is used as is for the selection) \n\n\t<Action/> - this [optional] section defines operations to be performed on selection. This can include CRUD operations, workflows, etc. \n\n\t <Return/> - this [optional] section defines return structure, Default to <Return>Select.*</Return> Default values: \n\n\t<Select>Find.*</Select> \n\n\t<Return>Select.*</Return>",
			"tutorial" : "This tutorial is an interactive TQL query environment. It is built on a simulated IoT case of Smart Parking. You will be prompted to open a visualizer of the parking facility. Click \"OK\" to open, click \"No thanks\" to run tutorial without visualizer.\n\n Now try identifying parking spaces by their state (occupied true/false, reserved true/false)?\n\n <Query..."
}